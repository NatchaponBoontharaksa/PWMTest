
PWMTEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000180  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000084b  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000702  00000000  00000000  00000af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000377  00000000  00000000  000011f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003eb  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e0  00000000  00000000  000019cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001aaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  88:	0c 94 be 00 	jmp	0x17c	; 0x17c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <IOInit>:


U2 mapValue(U2 tmp_duty)
{
	return (tmp_duty * 255) / 1023;
}
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	80 66       	ori	r24, 0x60	; 96
  94:	8a b9       	out	0x0a, r24	; 10
  96:	1b b8       	out	0x0b, r1	; 11
  98:	08 95       	ret

0000009a <PWMInit>:
  9a:	17 bc       	out	0x27, r1	; 39
  9c:	84 b5       	in	r24, 0x24	; 36
  9e:	80 68       	ori	r24, 0x80	; 128
  a0:	84 bd       	out	0x24, r24	; 36
  a2:	84 b5       	in	r24, 0x24	; 36
  a4:	83 60       	ori	r24, 0x03	; 3
  a6:	84 bd       	out	0x24, r24	; 36
  a8:	08 95       	ret

000000aa <ADCInit>:

void ADCInit()
{
	ADMUX = 0;         // use #0 ADC
  aa:	ec e7       	ldi	r30, 0x7C	; 124
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);    // use AVcc as the reference
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
	ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution
  b6:	80 81       	ld	r24, Z
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);    // 128 prescale for 8Mhz
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	87 60       	ori	r24, 0x07	; 7
  c4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);    // Enable the ADC
  c6:	80 81       	ld	r24, Z
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret

000000ce <readADC>:
	*/
}

U2 readADC()
{
	ADCSRA |= (1 << ADSC);
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
	
	while(ADCSRA & (1 << ADSC))
  d8:	80 81       	ld	r24, Z
  da:	86 ff       	sbrs	r24, 6
  dc:	17 c0       	rjmp	.+46     	; 0x10c <readADC+0x3e>
	{
		PORTD |= (1 << DDD5);
  de:	5d 9a       	sbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	87 ea       	ldi	r24, 0xA7	; 167
  e4:	91 e6       	ldi	r25, 0x61	; 97
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <readADC+0x18>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <readADC+0x22>
  f0:	00 00       	nop
		_delay_ms(2000);
		PORTD &= ~(1 << DDD5);
  f2:	5d 98       	cbi	0x0b, 5	; 11
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	87 ea       	ldi	r24, 0xA7	; 167
  f8:	91 e6       	ldi	r25, 0x61	; 97
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <readADC+0x2c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <readADC+0x36>
 104:	00 00       	nop

U2 readADC()
{
	ADCSRA |= (1 << ADSC);
	
	while(ADCSRA & (1 << ADSC))
 106:	80 81       	ld	r24, Z
 108:	86 fd       	sbrc	r24, 6
 10a:	e9 cf       	rjmp	.-46     	; 0xde <readADC+0x10>
		PORTD &= ~(1 << DDD5);
		_delay_ms(2000);
	}
	
	
	return ADC;
 10c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 110:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 114:	08 95       	ret

00000116 <main>:
U2 readADC();
U2 duty;

int main(void)
{	
	PWMInit();
 116:	0e 94 4d 00 	call	0x9a	; 0x9a <PWMInit>
	IOInit();
 11a:	0e 94 48 00 	call	0x90	; 0x90 <IOInit>
	ADCInit();
 11e:	0e 94 55 00 	call	0xaa	; 0xaa <ADCInit>
	duty = 0;
 122:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 126:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
}


U2 mapValue(U2 tmp_duty)
{
	return (tmp_duty * 255) / 1023;
 12a:	1f ef       	ldi	r17, 0xFF	; 255
 12c:	cf ef       	ldi	r28, 0xFF	; 255
 12e:	d3 e0       	ldi	r29, 0x03	; 3
	duty = 0;
	
    while (1) 
    {
		//ADCInit();
		duty = readADC();
 130:	0e 94 67 00 	call	0xce	; 0xce <readADC>
}


U2 mapValue(U2 tmp_duty)
{
	return (tmp_duty * 255) / 1023;
 134:	9c 01       	movw	r18, r24
 136:	12 9f       	mul	r17, r18
 138:	c0 01       	movw	r24, r0
 13a:	13 9f       	mul	r17, r19
 13c:	90 0d       	add	r25, r0
 13e:	11 24       	eor	r1, r1
 140:	be 01       	movw	r22, r28
 142:	0e 94 aa 00 	call	0x154	; 0x154 <__udivmodhi4>
	
    while (1) 
    {
		//ADCInit();
		duty = readADC();
		duty = mapValue(duty);
 146:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 14a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
		OCR0A = duty;
 14e:	67 bd       	out	0x27, r22	; 39
		PORTD |= 1 << DDD6;
 150:	5e 9a       	sbi	0x0b, 6	; 11
 152:	ee cf       	rjmp	.-36     	; 0x130 <main+0x1a>

00000154 <__udivmodhi4>:
 154:	aa 1b       	sub	r26, r26
 156:	bb 1b       	sub	r27, r27
 158:	51 e1       	ldi	r21, 0x11	; 17
 15a:	07 c0       	rjmp	.+14     	; 0x16a <__udivmodhi4_ep>

0000015c <__udivmodhi4_loop>:
 15c:	aa 1f       	adc	r26, r26
 15e:	bb 1f       	adc	r27, r27
 160:	a6 17       	cp	r26, r22
 162:	b7 07       	cpc	r27, r23
 164:	10 f0       	brcs	.+4      	; 0x16a <__udivmodhi4_ep>
 166:	a6 1b       	sub	r26, r22
 168:	b7 0b       	sbc	r27, r23

0000016a <__udivmodhi4_ep>:
 16a:	88 1f       	adc	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	5a 95       	dec	r21
 170:	a9 f7       	brne	.-22     	; 0x15c <__udivmodhi4_loop>
 172:	80 95       	com	r24
 174:	90 95       	com	r25
 176:	bc 01       	movw	r22, r24
 178:	cd 01       	movw	r24, r26
 17a:	08 95       	ret

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
